rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user is the owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to get user data
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Users collection - users can read their own profile, admins can read/write all
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isAdmin();
      allow create: if isAuthenticated() && isOwner(userId);
    }
    
    // Students collection - admins can read/write all, users can only read their linked student record
    match /students/{studentId} {
      allow read: if isAdmin() || 
                     (isAuthenticated() && 
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      getUserData().studentId == studentId);
      allow write: if isAdmin();
    }
    
    // Courses collection - admins can read/write all, authenticated users can read
    match /courses/{courseId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Programs collection - admins can read/write all, authenticated users can read
    match /programs/{programId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Student Courses collection (grades) - admins can read/write all, 
    // users can only read their own grades
    match /studentCourses/{studentCourseId} {
      allow read: if isAdmin() || 
                     (isAuthenticated() && 
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      resource.data.studentId == getUserData().studentId);
      allow write: if isAdmin();
    }
    
    // Deny all other requests
    match /{document=} {
      allow read, write: if false;
    }
  }
}